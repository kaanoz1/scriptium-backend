// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using writings_backend_dotnet.DB;

#nullable disable

namespace writings_backend_dotnet.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.FreezeR", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ProceedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("proceed_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("freeze_r", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Block", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BlockedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("blocked_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("BlockedId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("blocked_id");

                    b.Property<Guid>("BlockerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("blocker_id");

                    b.Property<string>("Reason")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("reason");

                    b.HasKey("Id");

                    b.HasIndex("BlockedId");

                    b.HasIndex("BlockerId", "BlockedId")
                        .IsUnique();

                    b.ToTable("block", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Cache", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("data");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(126)
                        .HasColumnType("VARCHAR(126)")
                        .HasColumnName("key");

                    b.HasKey("Id");

                    b.ToTable("cache", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.CacheR", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CacheId")
                        .HasColumnType("bigint")
                        .HasColumnName("cache_id");

                    b.Property<DateTime>("FetchedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fetched_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("CacheId");

                    b.ToTable("cache_r", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Chapter", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("name");

                    b.Property<byte>("Number")
                        .HasColumnType("tinyint")
                        .HasColumnName("number");

                    b.Property<short>("SectionId")
                        .HasColumnType("smallint")
                        .HasColumnName("section_id");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SectionId", "Number")
                        .IsUnique();

                    b.ToTable("chapter", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.ChapterMeaning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short>("ChapterId")
                        .HasColumnType("smallint")
                        .HasColumnName("chapter_id");

                    b.Property<byte>("LanguageId")
                        .HasColumnType("tinyint")
                        .HasColumnName("language_id");

                    b.Property<string>("Meaning")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("meaning");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ChapterId", "LanguageId")
                        .IsUnique();

                    b.ToTable("chapter_meaning", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasDefaultValue("")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Name")
                        .IsUnique();

                    b.ToTable("collection", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.CollectionVerse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("collection_id");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("note");

                    b.Property<DateTime>("SavedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("saved_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("VerseId")
                        .HasColumnType("int")
                        .HasColumnName("verse_id");

                    b.HasKey("Id");

                    b.HasIndex("VerseId");

                    b.HasIndex("CollectionId", "VerseId")
                        .IsUnique();

                    b.ToTable("collection_verse", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CommentNoteId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommentVerseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long?>("ParentCommentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_comment_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("comment", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.CommentNote", b =>
                {
                    b.Property<long>("CommentId")
                        .HasColumnType("bigint")
                        .HasColumnName("comment_id");

                    b.Property<long>("NoteId")
                        .HasColumnType("bigint")
                        .HasColumnName("note_id");

                    b.HasKey("CommentId");

                    b.HasIndex("NoteId");

                    b.ToTable("comment_note", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.CommentVerse", b =>
                {
                    b.Property<long>("CommentId")
                        .HasColumnType("bigint")
                        .HasColumnName("comment_id");

                    b.Property<int>("VerseId")
                        .HasColumnType("int")
                        .HasColumnName("verse_id");

                    b.HasKey("CommentId");

                    b.HasIndex("VerseId");

                    b.ToTable("comment_verse", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Follow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("FollowedId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("followed_id");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("follower_id");

                    b.Property<DateTime>("OccurredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("occurred_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("FollowedId");

                    b.HasIndex("FollowerId", "FollowedId")
                        .IsUnique();

                    b.ToTable("follow", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.FollowR", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("FollowedId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("followed_id");

                    b.Property<Guid>("FollowerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("follower_id");

                    b.Property<DateTime>("OccurredAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("occurred_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("FollowedId");

                    b.HasIndex("FollowerId", "FollowedId")
                        .IsUnique();

                    b.ToTable("follow_r", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.FootNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FootNoteTextId")
                        .HasColumnType("bigint")
                        .HasColumnName("footnote_text_id");

                    b.Property<short>("Index")
                        .HasColumnType("smallint")
                        .HasColumnName("index");

                    b.Property<short>("Number")
                        .HasColumnType("smallint")
                        .HasColumnName("number");

                    b.Property<long>("TranslationTextId")
                        .HasColumnType("bigint")
                        .HasColumnName("translation_text_id");

                    b.HasKey("Id");

                    b.HasIndex("FootNoteTextId");

                    b.HasIndex("TranslationTextId");

                    b.HasIndex("Number", "FootNoteTextId", "Index");

                    b.ToTable("footnote", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.FootNoteText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.ToTable("footnote_text", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Language", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint")
                        .HasColumnName("id");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasColumnType("VARCHAR(2)")
                        .HasColumnName("lang_code");

                    b.Property<string>("LangEnglish")
                        .IsRequired()
                        .HasColumnType("VARCHAR(16)")
                        .HasColumnName("lang_english");

                    b.Property<string>("LangOwn")
                        .IsRequired()
                        .HasColumnType("VARCHAR(16)")
                        .HasColumnName("lang_own");

                    b.HasKey("Id");

                    b.HasIndex("LangCode")
                        .IsUnique();

                    b.ToTable("language", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            LangCode = "en",
                            LangEnglish = "English",
                            LangOwn = "English"
                        },
                        new
                        {
                            Id = (byte)2,
                            LangCode = "de",
                            LangEnglish = "German",
                            LangOwn = "Deutsch"
                        });
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Like", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("lke", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.LikeComment", b =>
                {
                    b.Property<long>("LikeId")
                        .HasColumnType("bigint")
                        .HasColumnName("likeId");

                    b.Property<long>("CommentId")
                        .HasColumnType("bigint")
                        .HasColumnName("comment_id");

                    b.HasKey("LikeId");

                    b.HasIndex("CommentId");

                    b.ToTable("like_comment", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.LikeNote", b =>
                {
                    b.Property<long>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("like_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LikeId"));

                    b.Property<long>("NoteId")
                        .HasColumnType("bigint")
                        .HasColumnName("note_id");

                    b.HasKey("LikeId");

                    b.HasIndex("NoteId")
                        .IsUnique();

                    b.ToTable("like_note", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Note", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<int>("VerseId")
                        .HasColumnType("int")
                        .HasColumnName("verse_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VerseId", "UserId")
                        .IsUnique();

                    b.ToTable("note", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("ActorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("actor_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("entity_id");

                    b.Property<int?>("EntityType")
                        .HasColumnType("int")
                        .HasColumnName("entity_type");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int")
                        .HasColumnName("notification_type");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recipient_id");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("RecipientId");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Root", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Latin")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("VARCHAR(5)")
                        .HasColumnName("latin");

                    b.Property<string>("Own")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("VARCHAR(5)")
                        .HasColumnName("own");

                    b.Property<byte>("ScriptureId")
                        .HasColumnType("tinyint")
                        .HasColumnName("scripture_id");

                    b.HasKey("Id");

                    b.HasIndex("ScriptureId");

                    b.HasIndex("Latin", "ScriptureId")
                        .IsUnique();

                    b.ToTable("root", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Scripture", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("CHAR(1)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("name");

                    b.Property<byte>("Number")
                        .HasColumnType("tinyint")
                        .HasColumnName("number");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("scripture", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.ScriptureMeaning", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<byte>("LanguageId")
                        .HasColumnType("tinyint")
                        .HasColumnName("language_id");

                    b.Property<string>("Meaning")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("meaning");

                    b.Property<byte>("ScriptureId")
                        .HasColumnType("tinyint")
                        .HasColumnName("scripture_id");

                    b.HasKey("Id");

                    b.HasIndex("ScriptureId");

                    b.HasIndex("LanguageId", "ScriptureId")
                        .IsUnique();

                    b.ToTable("scripture_meaning", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Section", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("name");

                    b.Property<short>("Number")
                        .HasColumnType("smallint")
                        .HasColumnName("number");

                    b.Property<byte>("ScriptureId")
                        .HasColumnType("tinyint")
                        .HasColumnName("scripture_id");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ScriptureId", "Number")
                        .IsUnique();

                    b.ToTable("section", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.SectionMeaning", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<byte>("LanguageId")
                        .HasColumnType("tinyint")
                        .HasColumnName("language_id");

                    b.Property<string>("Meaning")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("meaning");

                    b.Property<short>("SectionId")
                        .HasColumnType("smallint")
                        .HasColumnName("section_id");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.HasIndex("LanguageId", "SectionId")
                        .IsUnique();

                    b.ToTable("section_meaning", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Session", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Key");

                    b.HasIndex("UserId");

                    b.ToTable("session");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Suggestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("SuggestionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR(500)")
                        .HasColumnName("suggestion_text");

                    b.Property<long>("TranslationTextId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TranslationTextId1")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TranslationTextId");

                    b.HasIndex("TranslationTextId1");

                    b.HasIndex("UserId", "TranslationTextId")
                        .IsUnique();

                    b.ToTable("suggestion", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Translation", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("added_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("EagerFrom")
                        .HasColumnType("datetime")
                        .HasColumnName("eager_from");

                    b.Property<byte>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("ProductionTime")
                        .HasColumnType("datetime")
                        .HasColumnName("production_year");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("translation", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.TranslationText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("text");

                    b.Property<short>("TranslationId")
                        .HasColumnType("smallint")
                        .HasColumnName("translation_id");

                    b.Property<int>("VerseId")
                        .HasColumnType("int")
                        .HasColumnName("verse_id");

                    b.HasKey("Id");

                    b.HasIndex("TranslationId");

                    b.HasIndex("VerseId");

                    b.ToTable("translation_text", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Translator", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("varchar(max)")
                        .HasColumnName("description");

                    b.Property<byte>("LanguageId")
                        .HasColumnType("tinyint")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR(250)")
                        .HasColumnName("name");

                    b.Property<string>("Url")
                        .HasColumnType("varchar(max)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("translator", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.TranslatorTranslation", b =>
                {
                    b.Property<short>("TranslatorId")
                        .HasColumnType("smallint")
                        .HasColumnName("translator_id");

                    b.Property<short>("TranslationId")
                        .HasColumnType("smallint")
                        .HasColumnName("translation_id");

                    b.Property<DateTime>("AssignedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assigned_on")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("TranslatorId", "TranslationId");

                    b.HasIndex("TranslationId");

                    b.ToTable("translator_translation", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Transliteration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte>("LanguageId")
                        .HasColumnType("tinyint")
                        .HasColumnName("language_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("text");

                    b.Property<int>("VerseId")
                        .HasColumnType("int")
                        .HasColumnName("verse_id");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("VerseId", "LanguageId")
                        .IsUnique();

                    b.ToTable("transliteration", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Biography")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EmailVerified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .HasColumnType("CHAR(1)")
                        .HasColumnName("gender");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("image");

                    b.Property<DateTime?>("IsFrozen")
                        .HasColumnType("datetime")
                        .HasColumnName("is_frozen");

                    b.Property<DateTime?>("IsPrivate")
                        .HasColumnType("datetime")
                        .HasColumnName("is_private");

                    b.Property<DateTime?>("LastActive")
                        .HasColumnType("datetime")
                        .HasColumnName("last_active");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("VARCHAR(16)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte>("PreferredLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("preferred_languageId");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("VARCHAR(16)")
                        .HasColumnName("surname");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("VARCHAR(16)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("EmailIndex")
                        .HasFilter("[NormalizedEmail] IS NOT NULL");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PreferredLanguageId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Verse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<short>("ChapterId")
                        .HasColumnType("smallint")
                        .HasColumnName("chapter_id");

                    b.Property<short>("Number")
                        .HasColumnType("smallint")
                        .HasColumnName("number");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("text");

                    b.Property<string>("TextSimplified")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("text_simplified");

                    b.Property<string>("TextWithoutVowel")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("text_without_vowel");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId", "Number")
                        .IsUnique();

                    b.ToTable("verse", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Word", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("RootId")
                        .HasColumnType("bigint")
                        .HasColumnName("root_id");

                    b.Property<short>("SequenceNumber")
                        .HasColumnType("smallint")
                        .HasColumnName("sequence_number");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("text");

                    b.Property<string>("TextSimplified")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("text_simplified");

                    b.Property<string>("TextWithoutVowel")
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("text_without_vowel");

                    b.Property<int>("VerseId")
                        .HasColumnType("int")
                        .HasColumnName("verse_id");

                    b.HasKey("Id");

                    b.HasIndex("RootId");

                    b.HasIndex("VerseId");

                    b.HasIndex("SequenceNumber", "VerseId")
                        .IsUnique();

                    b.ToTable("word", (string)null);
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.WordMeaning", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<byte>("LanguageId")
                        .HasColumnType("tinyint")
                        .HasColumnName("language_id");

                    b.Property<string>("Meaning")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("meaning");

                    b.Property<long>("WordId")
                        .HasColumnType("bigint")
                        .HasColumnName("word_id");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("WordId");

                    b.ToTable("word_meaning", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("writings_backend_dotnet.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("writings_backend_dotnet.FreezeR", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.User", "User")
                        .WithMany("FreezeRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Block", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.User", "Blocked")
                        .WithMany("BlockedByUsers")
                        .HasForeignKey("BlockedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("writings_backend_dotnet.Models.User", "Blocker")
                        .WithMany("BlockedUsers")
                        .HasForeignKey("BlockerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Blocked");

                    b.Navigation("Blocker");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.CacheR", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Cache", "Cache")
                        .WithMany("CacheRs")
                        .HasForeignKey("CacheId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cache");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Chapter", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Section", "Section")
                        .WithMany("Chapters")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.ChapterMeaning", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Chapter", "Chapter")
                        .WithMany("Meanings")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("writings_backend_dotnet.Models.Language", "Language")
                        .WithMany("ChapterMeanings")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Collection", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.User", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.CollectionVerse", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Collection", "Collection")
                        .WithMany("Verses")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("writings_backend_dotnet.Models.Verse", "Verse")
                        .WithMany("CollectionVerses")
                        .HasForeignKey("VerseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Verse");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Comment", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("writings_backend_dotnet.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.CommentNote", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Comment", "Comment")
                        .WithOne("CommentNote")
                        .HasForeignKey("writings_backend_dotnet.Models.CommentNote", "CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("writings_backend_dotnet.Models.Note", "Note")
                        .WithMany("Comments")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.CommentVerse", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Comment", "Comment")
                        .WithOne("CommentVerse")
                        .HasForeignKey("writings_backend_dotnet.Models.CommentVerse", "CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("writings_backend_dotnet.Models.Verse", "Verse")
                        .WithMany("Comments")
                        .HasForeignKey("VerseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Verse");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Follow", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.User", "Followed")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("writings_backend_dotnet.Models.User", "Follower")
                        .WithMany("Followings")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.FollowR", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.User", "Followed")
                        .WithMany("FollowerRs")
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("writings_backend_dotnet.Models.User", "Follower")
                        .WithMany("FollowRing")
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.FootNote", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.FootNoteText", "FootNoteText")
                        .WithMany("FootNotes")
                        .HasForeignKey("FootNoteTextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("writings_backend_dotnet.Models.TranslationText", "TranslationText")
                        .WithMany("FootNotes")
                        .HasForeignKey("TranslationTextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FootNoteText");

                    b.Navigation("TranslationText");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Like", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.LikeComment", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Comment", "Comment")
                        .WithMany("LikeComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("writings_backend_dotnet.Models.Like", "Like")
                        .WithOne("LikeComment")
                        .HasForeignKey("writings_backend_dotnet.Models.LikeComment", "LikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Like");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.LikeNote", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Like", "Like")
                        .WithOne("LikeNote")
                        .HasForeignKey("writings_backend_dotnet.Models.LikeNote", "NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("writings_backend_dotnet.Models.Note", "Note")
                        .WithMany("Likes")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Like");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Note", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("writings_backend_dotnet.Models.Verse", "Verse")
                        .WithMany("Notes")
                        .HasForeignKey("VerseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Verse");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Notification", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.User", "Actor")
                        .WithMany("NotificationsSent")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("writings_backend_dotnet.Models.User", "Recipient")
                        .WithMany("NotificationsReceived")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Root", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Scripture", "Scripture")
                        .WithMany("Roots")
                        .HasForeignKey("ScriptureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Scripture");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.ScriptureMeaning", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Language", "Language")
                        .WithMany("ScriptureMeanings")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("writings_backend_dotnet.Models.Scripture", "Scripture")
                        .WithMany("Meanings")
                        .HasForeignKey("ScriptureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Scripture");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Section", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Scripture", "Scripture")
                        .WithMany("Sections")
                        .HasForeignKey("ScriptureId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Scripture");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.SectionMeaning", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Language", "Language")
                        .WithMany("SectionMeanings")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("writings_backend_dotnet.Models.Section", "Section")
                        .WithMany("Meanings")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Session", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.User", null)
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Suggestion", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.TranslationText", "TranslationText")
                        .WithMany()
                        .HasForeignKey("TranslationTextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("writings_backend_dotnet.Models.TranslationText", null)
                        .WithMany("Suggestions")
                        .HasForeignKey("TranslationTextId1");

                    b.HasOne("writings_backend_dotnet.Models.User", "User")
                        .WithMany("Suggestions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TranslationText");

                    b.Navigation("User");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Translation", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Language", "Language")
                        .WithMany("Translations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.TranslationText", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Translation", "Translation")
                        .WithMany("TranslationTexts")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("writings_backend_dotnet.Models.Verse", "Verse")
                        .WithMany("TranslationTexts")
                        .HasForeignKey("VerseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Translation");

                    b.Navigation("Verse");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Translator", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Language", "Language")
                        .WithMany("Translators")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.TranslatorTranslation", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Translation", "Translation")
                        .WithMany("TranslatorTranslations")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("writings_backend_dotnet.Models.Translator", "Translator")
                        .WithMany("TranslatorTranslations")
                        .HasForeignKey("TranslatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Translation");

                    b.Navigation("Translator");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Transliteration", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Language", "Language")
                        .WithMany("Transliterations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("writings_backend_dotnet.Models.Verse", "Verse")
                        .WithMany("Transliterations")
                        .HasForeignKey("VerseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Verse");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.User", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Language", "PreferredLanguage")
                        .WithMany("PreferredUsers")
                        .HasForeignKey("PreferredLanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PreferredLanguage");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Verse", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Chapter", "Chapter")
                        .WithMany("Verses")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Word", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Root", "Root")
                        .WithMany("Words")
                        .HasForeignKey("RootId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("writings_backend_dotnet.Models.Verse", "Verse")
                        .WithMany("Words")
                        .HasForeignKey("VerseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Root");

                    b.Navigation("Verse");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.WordMeaning", b =>
                {
                    b.HasOne("writings_backend_dotnet.Models.Language", "Language")
                        .WithMany("WordMeanings")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("writings_backend_dotnet.Models.Word", "Word")
                        .WithMany("WordMeanings")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Cache", b =>
                {
                    b.Navigation("CacheRs");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Chapter", b =>
                {
                    b.Navigation("Meanings");

                    b.Navigation("Verses");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Collection", b =>
                {
                    b.Navigation("Verses");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Comment", b =>
                {
                    b.Navigation("CommentNote");

                    b.Navigation("CommentVerse");

                    b.Navigation("LikeComments");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.FootNoteText", b =>
                {
                    b.Navigation("FootNotes");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Language", b =>
                {
                    b.Navigation("ChapterMeanings");

                    b.Navigation("PreferredUsers");

                    b.Navigation("ScriptureMeanings");

                    b.Navigation("SectionMeanings");

                    b.Navigation("Translations");

                    b.Navigation("Translators");

                    b.Navigation("Transliterations");

                    b.Navigation("WordMeanings");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Like", b =>
                {
                    b.Navigation("LikeComment");

                    b.Navigation("LikeNote");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Note", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Root", b =>
                {
                    b.Navigation("Words");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Scripture", b =>
                {
                    b.Navigation("Meanings");

                    b.Navigation("Roots");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Section", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Meanings");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Translation", b =>
                {
                    b.Navigation("TranslationTexts");

                    b.Navigation("TranslatorTranslations");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.TranslationText", b =>
                {
                    b.Navigation("FootNotes");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Translator", b =>
                {
                    b.Navigation("TranslatorTranslations");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.User", b =>
                {
                    b.Navigation("BlockedByUsers");

                    b.Navigation("BlockedUsers");

                    b.Navigation("Collections");

                    b.Navigation("Comments");

                    b.Navigation("FollowRing");

                    b.Navigation("FollowerRs");

                    b.Navigation("Followers");

                    b.Navigation("Followings");

                    b.Navigation("FreezeRecords");

                    b.Navigation("Likes");

                    b.Navigation("Notes");

                    b.Navigation("NotificationsReceived");

                    b.Navigation("NotificationsSent");

                    b.Navigation("Sessions");

                    b.Navigation("Suggestions");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Verse", b =>
                {
                    b.Navigation("CollectionVerses");

                    b.Navigation("Comments");

                    b.Navigation("Notes");

                    b.Navigation("TranslationTexts");

                    b.Navigation("Transliterations");

                    b.Navigation("Words");
                });

            modelBuilder.Entity("writings_backend_dotnet.Models.Word", b =>
                {
                    b.Navigation("WordMeanings");
                });
#pragma warning restore 612, 618
        }
    }
}
